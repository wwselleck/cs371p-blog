---
layout: post
title:  "Week of Monday September 7th"
date:   2015-09-13 011:00:00
categories: 
---
The NFL season has started, and I am very much looking forward to another season of Cowboys fans getting their dreams crushed by how disappointing their team is.

I should really start writing this on Fridays or at least Saturdays, because I'm having a hard time recalling the week. I'm pretty sure last week was Labor Day, so we only had two classes, and really only one because Wednesday's class was a talk from a UT graduate working at Bloomberg. It seems like most people's blogs this week were about that, so I'll talk about something else. I will mention, however, that it was a pretty interesting talk and it sounds like Bloomberg is a good place to work. The only thing that rubbed me the wrong way (just a little bit) was how heavily they use internal tools. For example I don't know how good their in house issue tracker is, but I have a hard time believing it's better than something like JIRA, or even the piece of garbage that is Rally. Maybe I'm wrong, but I've never heard someone say that their company used mostly tools built in-house and liked it. 

This week I read some more of Accelerated C++ and finished up Project 1. I thought it was a pretty interesting project and it made me feel like a genius when I came up with my solution and got the Sphere time down to 0.00 (although I'm sure it isn't nearly as clever as I'm thinking), but I share many of the opinions that Lane has been talking about in his blog posts. Prof. Downing talks about how these projects are supposed to get us ready for what it's like in the industry, but a lot of the specifics of the project seem to contradict that.

For one, it's normally suggested that in version control you don't track files that are dynamically generated and instead track the files needed to generate those files. This way you don't for example commit an entire `build` folder, just the `Makefile` or `gulpfile` or other various build file so that anyone who pulls down your repo can make their own build. The instructions for the documentation of this project, however, suggested the opposite. We were instructed to not commit the Doxyfile (that we may have changed), and instead just generate documentation into an `html` folder and commit that. I have seen projects that for better or worse commit the actual generated docs to the repo, but at least those projects also commit the file used to generate those docs. Now for all I know there is a very good reason this is how Prof. Downing wanted it done, but at the very least it should be made aware to people that are new to this kind of stuff that this is not normally how you're supposed to do it. I don't even want to think about the talk I would get at work if not only committed a generated build folder, but didn't include any changes I made to the `gulpfile.js` before generating that build.

I do like how this project got me into the habit of making an issue every time I discover a bug instead of just keeping it in the back of my head, but don't really like how we were forced to make 10 issues from random project requirements. I, like basically everyone I've talked to about this, prefer to use something like Trello or Todoist or Wunderlist or literally any kind of organizer to keep track of mundane tasks like inviting the graders to the private repo or creating a Travis CI account. Those sort of things, in my opinion, don't belong in the issue tracker. But, like I said, overall I think the issue tracker requirements of the project were very useful. And if Prof. Downing's intent with the 10 issues from the project requirements was to get unfamiliar people some experience just using the Github issue tracker, I can kind of see how it'd be useful. 

Overall I think the project was really useful, I'm very much looking forward to getting started on Project 2, especially since the instructions for it seems way less specific than those of Project 1.

### Humdinger of the Week
I've decided to give properly learning Vim a go. As of now my development speed has probably been cut in half, but I have to admit that using Vim is way more fun than using Sublime. Typing in general is more fun than moving your finger around a touch pad. Probably the best resource I've found for learning Vim is just the `vimtutor` that comes with it, so if you're also interested in learning Vim beyond just `w` and `q` I suggest looking at that. Also, I've added a Vim section to a [repo](https://github.com/wwselleck/weston-guides/blob/master/vim-guide.md) I have for guides to various programming tools, if anyone is for some reason interested in Vimmy things I think are important to remember. I basically just use that repo for writing down things I don't want to forget, and who knows maybe someone someday will find it useful. 

Go Eagles
